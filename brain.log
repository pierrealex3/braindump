*** IntelliJ // shortcuts

Ctrl-Alt-B	-> go to impl


*** Java // Spring Boot // specify maps in config

// application.properties
org.pa.api.feat.this=true
org.pa.api.feat.that=false

// code
@ConfigurationProperties(prefix="org.pa.feat")
Map<String, Boolean> featMap;


*** Java // Spring Boot // typical web security class

@EnableWebSecurity
@ConditionalOnProperty(prefix="prop.prefix", name="suffix", havingValue=true|false)
public class SecurityConfig extends WebSecurityConfigurerAdapter

@Override
// the infamous allow..deny..scope..uripattern method


*** Java // Spring Boot // typical controller advice to handle exceptions in a web app

@ControllerAdvice
@RestController // truly required??
public class

@ExceptionHandler(MyRuntimeException.class)
@ResponseStatus(value=HttpStatus.BAD_REQUEST)
@ResponseBody // truly required??
public ResponseEntity<MyBody> handlerMethod( HttpServletRequest req, HttpServletResponse res, MyRuntimeException ex)


*** Java // Spring Boot // access to locale resource bundles (english, french message files)

ResourceBundleMessageSource r;	// autowired
var locale = LocaleContextHolder.getLocale();	// I guess that's a ThreadLocal mechanism coming with a setLocale
String msg = s.getMessage(code, args, locale);


*** Java // String format // display percentage and dollar sign
BigDecimal per = ...
BigDecimal amt = ...
String.format("This is percentage: %s%% and this is amount %s$", per, amt);


*** Java // String format // left and right pad with 0's
%05d -> 5 digit number left-padded with 0's ex: 00115
%.6f -> up to 6 digits after the period, right-padded with 0's ex: 22.560000


*** Java // String format // positional arg reference
String.format("Hello my %1$s %1$s", "friend"); // Hello my friend friend


** AWS // VPC // VPC Setup: allow for outside-world communication
To allow components running in a VPC subnet to communicate with the outside world, an explicit IP route must be added.
To do so: In the VPC subnet's route table, add a route with "Destination" 0.0.0.0/0 (aka everywhere) associated to an internet gateway "Target".


** AWS // EC2 // EC2 Setup: provision an IP address
Create an Elastic IP address and associate it to the private IP address of your EC2 instance
To do so: In AWS web, from the Elastic IPs menu of EC2


** AWS // EC2 // Connect to EC2
For this:
* your EC2 needs to have a public IP assigned
* you need to have the key pair (.pem) file at hand
* the SSH connection must be allowed in the VPC subnet (by default, it is)

$ ssh -i ~/Downloads/cryptobang-keys.pem ec2-user@3.138.76.40


** AWS // EC2 // Install basic software on a newly created EC2 (Amazon Linux)

$ sudo yum update
$ sudo amazon-linux-extras install java-openjdk11
// use the alternatives command-line utility in case there is more than one version of java installed.  This is great.
$ alternatives --config java


** AWS // EC2 // Transfer (scp) stuff over to the EC2 instance

$ scp -r -i ~/Downloads/cryptobang-keys.pem ./crashWire-0.0.1-SNAPSHOT.jar ec2-user@3.138.76.40:/home/ec2-user
crashWire-0.0.1-SNAPSHOT.jar 


** AWS // EC2 // Run a spring boot app on the EC2 instance (not forgetting AWS credentials)
I had to:
1) create an IAM role (cryptobang-iam-role)
2) then provision it with AmazonSNSFullAccess Policy (reference below)
3) then assign the EC2 instance with the created IAM role
Policy reference -> https://console.aws.amazon.com/iam/home?region=us-east-1#/policies/arn%3Aaws%3Aiam%3A%3Aaws%3Apolicy%2FAmazonSNSFullAccess

$ java -Dspring.profiles.active=smstest -jar crashWire-0.0.1-SNAPSHOT.jar > logs.out &


*** React // feature | libs summary

Testing:			Jest, Mocha
Http lib:			Fetch, Axios
Routing:			React Router
I18N:				react-intl
Animation:			react-motion
Form validatoin:	react-forms
CLI:				create-react-apps


*** React // 5 keys decisions to take up-front

* Dev environment (create-react-app to get started ?)
* classes or functions
* how to handle types (PropTypes or TypeScript ?)
* how to handle state (Plain React, Flux, Redux or MobX ?)
* how to handle styling (css, sass, less ?)


*** crypto // generate a PKCS12 keystore with a self signed certificate in it - with keytool

$ keytool -genkeypair -alias cryptobalance -keystore localhost_orgpaks.pfx -storetype PKCS12 -keyalg RSA -storepass Kodak123 -validity 36500 -keysize 2048


*** crypto // view entries (certificate fingerprint) in a key storepass

$ keytool -list -keystore localhost_orgpaks.pfx


*** curl // https // ignore the non legit (ex: self-signed) certificate

$ curl -k -s https://localhost:8443/blabla


*** curl // POST

-i -> include response headers
-s -> shhhht...
-k -> accept non-legit certs
-u -> Basic Auth
$ curl -X POST -i -s -k -u 'Pietro:CoucouMonTiChou' https://localhost:8443/crypto/balance/treasury
$ curl -X POST -i -k -s -u 'Pietro:CoucouMonTiChou' https://ec2-3-138-76-40.us-east-2.compute.amazonaws.com:8443/crypto/balance/treasury/registrations

** post with data

-H -> Content-Type header is usually mandatory
--data -> refer to data on file
$ curl  -i -s -X POST -H "Content-Type: application/json" --data "@/c/temp/data.json" http://...

*** Spring HTTPS // minimal setup

server.port=8443
server.ssl.enabled=true
server.ssl.key-alias=cryptobalance
server.ssl.key-store=classpath:localhost_orgpaks.pfx
server.ssl.key-store-password=Kodak123

